name: CI

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 3 * * 1" # Weekly security scan on Mondays

permissions:
  contents: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.9"

jobs:
  dependency-review:
    name: Dependency Review
    if:
      ${{ github.event_name == 'pull_request' &&
      github.event.pull_request.base.repo.private == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Dependency review
        uses: actions/dependency-review-action@v4

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run basedpyright type checking
        run: basedpyright

      - name: Ruff lint
        uses: astral-sh/ruff-action@v1
        with:
          args: check src/ tests/ --output-format=concise

      - name: Ruff format check
        uses: astral-sh/ruff-action@v1
        with:
          args: format --check src/ tests/

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint
    env:
      QT_QPA_PLATFORM: "offscreen"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests
        run: pytest -v -m "not integration" --tb=short --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run pip-audit
        uses: pypa/gh-action-pip-audit@v1.1.0
        with:
          inputs: requirements.txt
          format: json
          output: pip-audit.json
        continue-on-error: true

      - name: Perform Bandit Analysis
        uses: PyCQA/bandit-action@v1
        with:
          severity: high
          confidence: high
          exclude: ".svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.eggs,*.egg,venv,dist,build,scripts/copy_addon_to_addons21.py"
          targets: "src,scripts"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: pip-audit.json
          retention-days: 30

  build-addon-package:
    name: Build .ankiaddon Artifact
    runs-on: ubuntu-latest
    needs: [test]
    if:
      github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Build .ankiaddon
        run: python scripts/build_ankiaddon.py

      - name: Upload .ankiaddon artifact
        uses: actions/upload-artifact@v4
        with:
          name: anki-addon
          path: dist/*.ankiaddon
          retention-days: 30
